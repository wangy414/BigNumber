# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BigNumber
else:
    import _BigNumber

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BigNumber.delete_SwigPyIterator

    def value(self):
        return _BigNumber.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BigNumber.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BigNumber.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BigNumber.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BigNumber.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BigNumber.SwigPyIterator_copy(self)

    def next(self):
        return _BigNumber.SwigPyIterator_next(self)

    def __next__(self):
        return _BigNumber.SwigPyIterator___next__(self)

    def previous(self):
        return _BigNumber.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BigNumber.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BigNumber.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BigNumber.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BigNumber.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BigNumber.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BigNumber.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BigNumber.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BigNumber:
_BigNumber.SwigPyIterator_swigregister(SwigPyIterator)

class BigFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BigNumber.BigFloat_swiginit(self, _BigNumber.new_BigFloat(*args))
    __swig_destroy__ = _BigNumber.delete_BigFloat

    def AbsoluteNumber(self):
        return _BigNumber.BigFloat_AbsoluteNumber(self)

    def ReverseNumber(self):
        return _BigNumber.BigFloat_ReverseNumber(self)

    @staticmethod
    def Zero():
        return _BigNumber.BigFloat_Zero()

    def IsZero(self):
        return _BigNumber.BigFloat_IsZero(self)

    def toString(self):
        return _BigNumber.BigFloat_toString(self)

    def compareTo(self, other):
        return _BigNumber.BigFloat_compareTo(self, other)
    OneMax = _BigNumber.BigFloat_OneMax

    def validateNumber(self, strNumber):
        return _BigNumber.BigFloat_validateNumber(self, strNumber)

    def parserNumber(self, strNumber):
        return _BigNumber.BigFloat_parserNumber(self, strNumber)

    @staticmethod
    def CharToInt(val):
        return _BigNumber.BigFloat_CharToInt(val)

    @staticmethod
    def IntToChar(val):
        return _BigNumber.BigFloat_IntToChar(val)

    def RemoveStartEndZero(self):
        return _BigNumber.BigFloat_RemoveStartEndZero(self)

    def RemoveStartZero(self, one):
        return _BigNumber.BigFloat_RemoveStartZero(self, one)

    def dumpVector(self, one):
        return _BigNumber.BigFloat_dumpVector(self, one)

    def GetPrecision(self, value):
        return _BigNumber.BigFloat_GetPrecision(self, value)

    def KeepPrecision(self, n):
        return _BigNumber.BigFloat_KeepPrecision(self, n)

    def Add(self, one, two):
        return _BigNumber.BigFloat_Add(self, one, two)

    def PlusAdd(self, one, two):
        return _BigNumber.BigFloat_PlusAdd(self, one, two)

    def IntAdd(self, one, two, intAdd):
        return _BigNumber.BigFloat_IntAdd(self, one, two, intAdd)

    def IntAddBigAddSmall(self, one, two, intAdd):
        return _BigNumber.BigFloat_IntAddBigAddSmall(self, one, two, intAdd)

    def DecimalAdd(self, one, two, intAdd):
        return _BigNumber.BigFloat_DecimalAdd(self, one, two, intAdd)

    def Minus(self, one, two):
        return _BigNumber.BigFloat_Minus(self, one, two)

    def PlusMinus(self, one, two):
        return _BigNumber.BigFloat_PlusMinus(self, one, two)

    def DecimalMinus(self, one, two, intMinus):
        return _BigNumber.BigFloat_DecimalMinus(self, one, two, intMinus)

    def IntMinus(self, *args):
        return _BigNumber.BigFloat_IntMinus(self, *args)

    def Multiply(self, *args):
        return _BigNumber.BigFloat_Multiply(self, *args)

    def Division(self, *args):
        return _BigNumber.BigFloat_Division(self, *args)

    def CompareList(self, one, two):
        return _BigNumber.BigFloat_CompareList(self, one, two)

    def __add__(self, two):
        return _BigNumber.BigFloat___add__(self, two)

    def __sub__(self, two):
        return _BigNumber.BigFloat___sub__(self, two)

    def __mul__(self, two):
        return _BigNumber.BigFloat___mul__(self, two)

    def __truediv__(self, *args):
        return _BigNumber.BigFloat___truediv__(self, *args)
    __div__ = __truediv__



    def PowerInt(self, value, intPow):
        return _BigNumber.BigFloat_PowerInt(self, value, intPow)

    def Power(self, *args):
        return _BigNumber.BigFloat_Power(self, *args)

# Register BigFloat in _BigNumber:
_BigNumber.BigFloat_swigregister(BigFloat)

def BigFloat_Zero():
    return _BigNumber.BigFloat_Zero()

def BigFloat_CharToInt(val):
    return _BigNumber.BigFloat_CharToInt(val)

def BigFloat_IntToChar(val):
    return _BigNumber.BigFloat_IntToChar(val)

class BigInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BigNumber.BigInt_swiginit(self, _BigNumber.new_BigInt(*args))
    __swig_destroy__ = _BigNumber.delete_BigInt

    def AbsoluteNumber(self):
        return _BigNumber.BigInt_AbsoluteNumber(self)

    def ReverseNumber(self):
        return _BigNumber.BigInt_ReverseNumber(self)

    @staticmethod
    def Zero():
        return _BigNumber.BigInt_Zero()

    def IsZero(self):
        return _BigNumber.BigInt_IsZero(self)

    def toString(self):
        return _BigNumber.BigInt_toString(self)

    def compareTo(self, other):
        return _BigNumber.BigInt_compareTo(self, other)
    OneMax = _BigNumber.BigInt_OneMax

    def validateNumber(self, strNumber):
        return _BigNumber.BigInt_validateNumber(self, strNumber)

    def parserNumber(self, strNumber):
        return _BigNumber.BigInt_parserNumber(self, strNumber)

    @staticmethod
    def CharToInt(val):
        return _BigNumber.BigInt_CharToInt(val)

    @staticmethod
    def IntToChar(val):
        return _BigNumber.BigInt_IntToChar(val)

    def RemoveStartZero(self, one):
        return _BigNumber.BigInt_RemoveStartZero(self, one)

    def dumpVector(self, one):
        return _BigNumber.BigInt_dumpVector(self, one)

    def Add(self, one, two):
        return _BigNumber.BigInt_Add(self, one, two)

    def PlusAdd(self, one, two):
        return _BigNumber.BigInt_PlusAdd(self, one, two)

    def IntAdd(self, one, two, intAdd):
        return _BigNumber.BigInt_IntAdd(self, one, two, intAdd)

    def IntAddBigAddSmall(self, one, two, intAdd):
        return _BigNumber.BigInt_IntAddBigAddSmall(self, one, two, intAdd)

    def Minus(self, one, two):
        return _BigNumber.BigInt_Minus(self, one, two)

    def PlusMinus(self, one, two):
        return _BigNumber.BigInt_PlusMinus(self, one, two)

    def IntMinus(self, *args):
        return _BigNumber.BigInt_IntMinus(self, *args)

    def Multiply(self, *args):
        return _BigNumber.BigInt_Multiply(self, *args)

    def Division(self, *args):
        return _BigNumber.BigInt_Division(self, *args)

    def CompareList(self, one, two):
        return _BigNumber.BigInt_CompareList(self, one, two)

    def __add__(self, two):
        return _BigNumber.BigInt___add__(self, two)

    def __sub__(self, two):
        return _BigNumber.BigInt___sub__(self, two)

    def __mul__(self, two):
        return _BigNumber.BigInt___mul__(self, two)

    def __truediv__(self, *args):
        return _BigNumber.BigInt___truediv__(self, *args)
    __div__ = __truediv__



    def PowerInt(self, value, intPow):
        return _BigNumber.BigInt_PowerInt(self, value, intPow)

    def Power(self, *args):
        return _BigNumber.BigInt_Power(self, *args)

# Register BigInt in _BigNumber:
_BigNumber.BigInt_swigregister(BigInt)

def BigInt_Zero():
    return _BigNumber.BigInt_Zero()

def BigInt_CharToInt(val):
    return _BigNumber.BigInt_CharToInt(val)

def BigInt_IntToChar(val):
    return _BigNumber.BigInt_IntToChar(val)



